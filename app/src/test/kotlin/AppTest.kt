/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package codes.pedromanoel.orcamento.app

import assertk.assertAll
import assertk.assertThat
import assertk.assertions.isEmpty
import assertk.assertions.isEqualTo
import codes.pedromanoel.orcamento.domain.GastoFixo
import codes.pedromanoel.orcamento.domain.GastoSazonal
import codes.pedromanoel.orcamento.domain.GastoVariavelSemanal
import codes.pedromanoel.orcamento.domain.ResumoDoRetrato
import codes.pedromanoel.orcamento.domain.usecases.ApresentarResumoDoRetrato
import codes.pedromanoel.orcamento.domain.usecases.CadastrarGastos
import com.natpryce.konfig.ConfigurationMap
import com.nhaarman.mockitokotlin2.*
import kong.unirest.ContentType.APPLICATION_JSON
import kong.unirest.HeaderNames
import kong.unirest.Unirest
import org.junit.jupiter.api.*

private const val PORT_NUMBER = "3000"
private const val BASE_URL = "http://localhost:$PORT_NUMBER"

class AppTest {

    private val config = ConfigurationMap(
            "port" to PORT_NUMBER,
            "javalin.show-javalin-banner" to "false"
    )

    private val cadastrarGastos = mock<CadastrarGastos>()
    private val apresentarResumoDoRetrato = mock<ApresentarResumoDoRetrato>()

    private val app = App(AppConfiguration(config), cadastrarGastos, apresentarResumoDoRetrato)

    @BeforeAll
    internal fun startApp() {
        Unirest.config()
                .setDefaultHeader(HeaderNames.ACCEPT, APPLICATION_JSON.toString())
                .defaultBaseUrl(BASE_URL)

        app.start()
    }

    @AfterAll
    internal fun stopApp() {
        app.stop()
    }

    @BeforeEach
    internal fun setUp() {
        reset(cadastrarGastos)
    }

    @AfterEach
    internal fun tearDown() {
        validateMockitoUsage()
    }

    @Test
    internal fun `cria a aplicação com sucesso`() {
        App.create()
    }

    @Test
    internal fun `cadastra gastos`() {
        val response = Unirest.post("/retrato/gastos")
                // language=json
                .body("""{
  "fixos": [{"nome": "Luz", "valor": 43.50, "vencimento": 10}],
  "variaveis": [{"nome": "Mercado", "valor": 50}],
  "sazonais": [{"nome":  "IPVA", "valor": 1500, "periodoEmMeses": 12}]
}
""").asString()

        assertAll {
            assertThat(response.body).isEmpty()
            assertThat(response.status).isEqualTo(201)
        }

        verify(cadastrarGastos).adicionarGasto(GastoFixo("Luz", 43_50, 10))
        verify(cadastrarGastos).adicionarGasto(GastoVariavelSemanal("Mercado", 50_00))
        verify(cadastrarGastos).adicionarGasto(GastoSazonal("IPVA", 1500_00, 12))
    }

    @Test
    @Disabled
    internal fun `mostra resumo do retrato`() {
        whenever(apresentarResumoDoRetrato.obterResumo())
                .thenReturn(ResumoDoRetrato(1000, 1200, 120, 0.15))

        val response = Unirest.post("/retrato/resumo").asString()

        assertAll {
            assertThat(response.status).isEqualTo(200)
            assertThat(response.body).isEqualTo(
                    """
{"totalFixos": 10.00, "totalVariavelMensal": 12.00, }
"""
            )
        }
    }
}
